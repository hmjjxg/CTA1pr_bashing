names(genotype_color) <- names(levels)
pi.dat %>%
filter(!is.na(new_median)) %>%
ggplot(aes(x = new_time, y = new_median, color = Genotype)) + p.timecourse +
scale_color_manual(values= genotype_color, limits = names(genotype_color)) +
xlab("Phosphate starvation, time (min)")
#scale_y_continuous(limits = c(NA, 22))
ggsave("output/TrunV_0Pi.png", width = 6, height = 8)
library(tidyverse)
library(ggtext)
#library(mgcv)
#library(broom)
library(cowplot)
p.timecourse <- list(
stat_summary(fun = "mean", geom = "point", size = 3),
stat_summary(fun.data = "mean_cl_boot", geom = "errorbar", width = 3),
stat_smooth(aes(size = Genotype == "WT"), method = "loess",
formula = 'y~x', se = FALSE),
scale_x_continuous(breaks = seq(0,240,30)),
scale_size_manual(values = c(0.8, 1.5), guide = "none"),
labs(x = "Time (min)", y = "Cta1-GFP protein level (a.u.)"),
theme_cowplot(line_size = 0.7, font_size = 14),
theme(legend.position=c(0.05,0.75),
#legend.box.background = element_rect(color = "black"),
#legend.box.margin = margin(3,3,3,3),
legend.text = element_text(face = 3),
legend.title = element_text(),
axis.title = element_text(size = rel(1)),
#axis.title.x = element_blank(),
axis.text.x = element_text(hjust=0.5), axis.text = element_text(size = rel(1)),
)
)
files <- dir("input/OL_0Pi", pattern = "d01*") # get the file names of the merged
files <- file.path("input//OL_0Pi", files)         # this appends the directory to the file names
names(files) <- c("Rep1-0Pi-Ctrl","Rep2-0Pi-Ctrl", "Rep3-0Pi-Ctrl")
tp <- c("0min",  "30min", "60min", "90min", "120min", "150min",  "180min", "210min", "240min") # ordered time points
# import and process the data to the format we want
data <- map_dfr(files, ~read_csv(., na = c("", "NA", "N/A"), col_types = cols()), .id = "Replicate") %>%
#bind_rows(.id = "Replicate") %>%
filter(`X Parameter` == "BL1-H", is.na(`Y Parameter`)) %>%
select(Replicate, Group, Sample, Count, median = `X Median`, peak = `X Peak`,
sd = `X SD`, cv = `X %CV`, rCV = `X %rCV`) %>%
separate(Group, into = c('Time', 'Treatment'), sep = "-") %>%
mutate(Time = ordered(Time, levels = tp)) %>%
mutate(Sample = case_when(Sample == "CTA1-GFP-yH298" ~ "yH298-wt",
Sample == "CTA1-GFP-yH299" ~ "yH299-wt",
Sample == "yH343-wt" ~ "yH343-rescue",
Sample == "yH344-wt" ~ "yH344-rescue",
TRUE ~ Sample)) %>%
mutate(Replicate = gsub("\\-.*","", Replicate)) %>% #
separate(Sample, into = c("Strain", "genotype"), sep = "-") %>%
arrange(Time)
# To replace the value: ifelse() for a single test, case_when() for multiple test
# \\-: escape character "\\" used to escape the special meaning of -, instead take - as a common regex pattern. Or we can specify the - as a regex pattern within a square bracket class [-]
#.*: This part matches any sequence of characters (.* is a common regex pattern for "any character, zero or more times"). metacharacter
# recode the genotype
levels <- c(WT = "wt", PC = "rescue",`4OL` = "4OL", `6OL` = "6OL", `8OL` = "8OL", `10OL` = "10OL")
pi.dat <- data %>%
filter(genotype %in% c("wt", "4OL", "6OL", "8OL", "10OL","rescue")) %>%
select(Time, replicate = Replicate, genotype, median) %>%
mutate(Genotype = fct_recode(genotype, !!!levels)) %>%
mutate(new_median =median/1000) %>%
mutate(new_time = as.numeric(gsub("min","",Time)))%>%
arrange(new_time, genotype, replicate)
genotype_color <- RColorBrewer::brewer.pal(8, "Dark2")[c(8, 7, 6, 1, 5, 4)]
names(genotype_color) <- names(levels)
pi.dat %>%
filter(!is.na(new_median)) %>%
ggplot(aes(x = new_time, y = new_median, color = Genotype)) + p.timecourse +
scale_color_manual(values= genotype_color, limits = names(genotype_color)) +
xlab("Phosphate starvation, time (min)")
#scale_y_continuous(limits = c(NA, 22))
#ggsave("output/OL_0Pi.png", width = 6, height = 8)
files <- dir("input/OL_2mMH2O2", pattern = "d*") # get the file names of the merged
files <- file.path("input//OL_2mMH2O2", files)      # this appends the directory to the file names
names(files) <- c("Rep1-2mMH2O2","Rep2-2mMH2O2", "Rep3-2mMH2O2", "Rep4-2mMH2O2")
tp <- c("0min",  "30min", "60min", "90min", "120min", "150min",  "180min", "210min", "240min") # ordered time points
# import and process the data to the format we want
data.ol.oxi <- map_dfr(files, ~read_csv(., na = c("", "NA", "N/A"), col_types = cols()), .id = "Replicate") %>%
#bind_rows(.id = "Replicate") %>%
filter(`X Parameter` == "BL1-H", is.na(`Y Parameter`)) %>%
select(Replicate, Group, Sample, Count, median = `X Median`, peak = `X Peak`,
sd = `X SD`, cv = `X %CV`, rCV = `X %rCV`) %>%
separate(Group, into = c('Time', 'Treatment'), sep = "-") %>%
mutate(Time = ordered(Time, levels = tp)) %>%
mutate(Sample = case_when(Sample == "CTA1-GFP-yH298" ~ "yH298-wt",
Sample == "CTA1-GFP-yH299" ~ "yH299-wt",
Sample == "yH343-wt" ~ "yH343-rescue",
Sample == "yH344-wt" ~ "yH344-rescue",
TRUE ~ Sample)) %>%
mutate(Replicate = gsub("\\-.*","", Replicate)) %>% #
separate(Sample, into = c("Strain", "genotype"), sep = "-") %>%
arrange(Time)
# To replace the value: ifelse() for a single test, case_when() for multiple test
# \\-: escape character "\\" used to escape the special meaning of -, instead take - as a common regex pattern. Or we can specify the - as a regex pattern within a square bracket class [-]
#.*: This part matches any sequence of characters (.* is a common regex pattern for "any character, zero or more times"). metacharacter
View(data.ol.oxi)
# recode the genotype
levels <- c(WT = "wt", PC = "rescue",`4OL` = "4OL", `6OL` = "6OL", `8OL` = "8OL", `10OL` = "10OL")
oxi.dat <- data.ol.oxi %>%
filter(genotype %in% c("wt", "4OL", "6OL", "8OL", "10OL","rescue")) %>%
select(Time, replicate = Replicate, genotype, median) %>%
mutate(Genotype = fct_recode(genotype, !!!levels)) %>%
mutate(new_median =median/1000) %>%
mutate(new_time = as.numeric(gsub("min","",Time)))%>%
arrange(new_time, genotype, replicate)
genotype_color <- RColorBrewer::brewer.pal(8, "Dark2")[c(8, 7, 6, 1, 5, 4)]
names(genotype_color) <- names(levels)
oxi.dat %>%
filter(!is.na(new_median)) %>%
ggplot(aes(x = new_time, y = new_median, color = Genotype)) + p.timecourse +
scale_color_manual(values= genotype_color, limits = names(genotype_color)) +
xlab("Phosphate starvation, time (min)")
#scale_y_continuous(limits = c(NA, 22))
#ggsave("output/OL_oxi.png", width = 6, height = 8)
files <- dir("input/TrunV_2mMH2O2", pattern = "d*") # get the file names of the merged
files <- file.path("input//TrunV_2mMH2O2", files)      # this appends the directory to the file names
names(files) <- c("Rep1-2mMH2O2","Rep2-2mMH2O2", "Rep3-2mMH2O2")
tp <- c("0min",  "30min", "60min", "90min", "120min", "150min",  "180min", "210min", "240min") # ordered time points
# import and process the data to the format we want
data.TrunV.oxi <- map_dfr(files, ~read_csv(., na = c("", "NA", "N/A"), col_types = cols()), .id = "Replicate") %>%
#bind_rows(.id = "Replicate") %>%
filter(`X Parameter` == "BL1-H", is.na(`Y Parameter`)) %>%
select(Replicate, Group, Sample, Count, median = `X Median`, peak = `X Peak`,
sd = `X SD`, cv = `X %CV`, rCV = `X %rCV`) %>%
separate(Group, into = c('Time', 'Treatment'), sep = "-") %>%
mutate(Time = ordered(Time, levels = tp)) %>%
mutate(Sample = case_when(Sample == "CTA1-GFP-yH298" ~ "yH298-wt",
Sample == "CTA1-GFP-yH299" ~ "yH299-wt",
Sample == "yH343-wt" ~ "yH343-rescue",
Sample == "yH344-wt" ~ "yH344-rescue",
TRUE ~ Sample)) %>%
mutate(Replicate = gsub("\\-.*","", Replicate)) %>% #
separate(Sample, into = c("Strain", "genotype"), sep = "-") %>%
filter(!is.na(median)) %>%
arrange(Time)
# To replace the value: ifelse() for a single test, case_when() for multiple test
# \\-: escape character "\\" used to escape the special meaning of -, instead take - as a common regex pattern. Or we can specify the - as a regex pattern within a square bracket class [-]
#.*: This part matches any sequence of characters (.* is a common regex pattern for "any character, zero or more times"). metacharacter
View(data.TrunV.oxi)
# recode the genotype
levels <- c(WT = "wt", `PC` = "rescue", `2V` = "2V",`4V` = "4V", `6V` = "6V", `8V` = "8V")
oxi.dat <- data.TrunV.oxi  %>%
filter(genotype %in% c("wt", "2V", "4V", "6V", "8V","rescue")) %>%
select(Time, replicate = Replicate, genotype, median) %>%
mutate(Genotype = fct_recode(genotype, !!!levels)) %>%
mutate(new_median =median/1000) %>%
mutate(new_time = as.numeric(gsub("min","",Time)))%>%
arrange(new_time, genotype, replicate)
genotype_color <- RColorBrewer::brewer.pal(8, "Dark2")[c(8, 7, 6, 1, 5, 4)]
names(genotype_color) <- names(levels)
oxi.dat %>%
filter(!is.na(new_median)) %>%
ggplot(aes(x = new_time, y = new_median, color = Genotype)) + p.timecourse +
scale_color_manual(values= genotype_color, limits = names(genotype_color)) +
xlab("Phosphate starvation, time (min)")
#scale_y_continuous(limits = c(NA, 22))
#ggsave("output/OL_oxi.png", width = 6, height = 8)
# recode the genotype
levels <- c(WT = "wt", `PC` = "rescue", `2V` = "2V",`4V` = "4V", `6V` = "6V", `8V` = "8V")
oxi.dat <- data.TrunV.oxi  %>%
filter(genotype %in% c("wt", "2V", "4V", "6V", "8V","rescue")) %>%
select(Time, replicate = Replicate, genotype, median) %>%
mutate(Genotype = fct_recode(genotype, !!!levels)) %>%
mutate(new_median =median/1000) %>%
mutate(new_time = as.numeric(gsub("min","",Time)))%>%
arrange(new_time, genotype, replicate)
genotype_color <- RColorBrewer::brewer.pal(8, "Dark2")[c(8, 7, 6, 1, 5, 4)]
names(genotype_color) <- names(levels)
oxi.dat %>%
filter(!is.na(new_median)) %>%
ggplot(aes(x = new_time, y = new_median, color = Genotype)) + p.timecourse +
scale_color_manual(values= genotype_color, limits = names(genotype_color)) +
xlab("Phosphate starvation, time (min)")
#scale_y_continuous(limits = c(NA, 22))
ggsave("output/TrunV_oxi.png", width = 6, height = 8)
View(oxi.dat)
# recode the genotype
levels <- c(WT = "wt", `PC` = "rescue", `2V` = "2V",`4V` = "4V", `6V` = "6V", `8V` = "8V")
oxi.dat <- data.TrunV.oxi  %>%
filter(genotype %in% c("wt", "2V", "4V", "6V", "8V","rescue")) %>%
select(Time, replicate = Replicate, genotype, median) %>%
mutate(Genotype = fct_recode(genotype, !!!levels)) %>%
mutate(new_median =median/1000) %>%
mutate(new_time = as.numeric(gsub("min","",Time)))%>%
arrange(new_time, genotype, replicate)
genotype_color <- RColorBrewer::brewer.pal(8, "Dark2")[c(8, 7, 6, 1, 5, 4)]
names(genotype_color) <- names(levels)
oxi.dat %>%
filter(!is.na(new_median)) %>%
ggplot(aes(x = new_time, y = new_median, color = Genotype)) + p.timecourse +
scale_color_manual(values= genotype_color, limits = names(genotype_color)) +
xlab("Phosphate starvation, time (min)")
#scale_y_continuous(limits = c(NA, 22))
#ggsave("output/TrunV_oxi.png", width = 6, height = 8)
View(oxi.dat)
wt.test <- oxi.dat %>% filter(genotype = "WT")
wt.test <- oxi.dat %>% filter(genotype %in% c("wt"))
View(wt.test)
?loess
fit.wt <- loess(new_median~new_time, data=wt.test)
View(fit.wt)
x <- 0:240
x
?seq
x <- seq(0:240, by = 30)
x <- seq(0, 240, by = 30)
x
?predict
px <- predict(fit.wt, newdata = x)
px1 <- diff(px)
which.max(px1)
par(mfrow=c(1, 2))
plot(x, px, main="loess model")
plot(x[-1], px1, main="diff(loess model)")
abline(v=567, col="red")
x <- 0:240
px <- predict(fit.wt, newdata = x)
px1 <- diff(px)
which.max(px1)
par(mfrow=c(1, 2))
plot(x, px, main="loess model")
plot(x[-1], px1, main="diff(loess model)")
abline(v=567, col="red")
x[-1]
x
par(mfrow=c(1, 2))
ggplot(aes(x = x, y = px)) + scale_x_continuous(breaks = seq(0,240,30)) + theme_bw() + ggtitle("loess model")
wt.loess <- tibble(x = x, y = px)
wt.diff <- tibble (x = x[-1], y = px1)
par(mfrow=c(1, 2))
wt.loess %>%
ggplot(aes(x = x, y = px)) + scale_x_continuous(breaks = seq(0,240,30)) + theme_bw() + ggtitle("loess model")
wt.diff %>%
ggplot(aes(x = x, y = px1)) + scale_x_continuous(breaks = seq(0, 240, 30)) + theme_bw() + ggtitle("diff(loess model)")
#plot(x, px, main="loess model")
View(wt.diff)
par(mfrow=c(1, 2))
wt.loess %>%
ggplot(aes(x = x, y = px, color = black)) + scale_x_continuous(breaks = seq(0,240,30)) + theme_bw() + ggtitle("loess model")
?geom_point
par(mfrow=c(1, 2))
wt.loess %>%
ggplot(aes(x = x, y = px)) + geom_point(size = 2) + scale_x_continuous(breaks = seq(0,240,30)) + theme_bw() + ggtitle("loess model")
wt.diff %>%
ggplot(aes(x = x, y = px1)) + geom_point(size = 2)+ scale_x_continuous(breaks = seq(0, 240, 30)) + theme_bw() + ggtitle("diff(loess model)")
par(mfrow=c(1, 2))
wt.loess %>%
ggplot(aes(x = x, y = px)) + geom_point(size = 1, alpha = 0.5) + scale_x_continuous(breaks = seq(0,240,30)) + theme_bw() + ggtitle("loess model")
wt.diff %>%
ggplot(aes(x = x, y = px1)) + geom_point(size = 1, alpha = 0.5)+ scale_x_continuous(breaks = seq(0, 240, 30)) + theme_bw() + ggtitle("diff(loess model)")
wt.test <- oxi.dat %>% filter(genotype %in% c("wt"))
fit.wt <- loess(new_median~new_time, data=wt.test)
x <- 0:240
px <- predict(fit.wt, newdata = x)
px1 <- diff(px)
#which.max(px1)
wt.loess <- tibble(x = x, y = px)
wt.diff <- tibble (x = x[-1], y = px1)
twoV.test <- oxi.dat %>% filter(genotype %in% c("2V"))
fit.twoV <- loess(new_median~new_time, data=twoV.test)
x <- 0:240
px.2V <- predict(fit.twoV, newdata = x)
px1.2V <- diff(px.2V)
twoV.loess <- tibble(x = x, y = px.2V)
twoV.diff <- tibble (x = x[-1], y = px1.2V)
par(mfrow=c(1, 4))
wt.loess %>%
ggplot(aes(x = x, y = px)) + geom_point(size = 1, alpha = 0.5) + scale_x_continuous(breaks = seq(0,240,30)) + theme_bw() + ggtitle("loess model")
wt.diff %>%
ggplot(aes(x = x, y = px1)) + geom_point(size = 1, alpha = 0.5)+ scale_x_continuous(breaks = seq(0, 240, 30)) + theme_bw() + ggtitle("diff(loess model)")
twoV.loess %>%
ggplot(aes(x = x, y = px)) + geom_point(size = 1, alpha = 0.5) + scale_x_continuous(breaks = seq(0,240,30)) + theme_bw() + ggtitle("loess model")
twoV.diff %>%
ggplot(aes(x = x, y = px1)) + geom_point(size = 1, alpha = 0.5)+ scale_x_continuous(breaks = seq(0, 240, 30)) + theme_bw() + ggtitle("diff(loess model)")
View(twoV.diff)
View(twoV.loess)
View(twoV.diff)
View(twoV.loess)
wt.test <- oxi.dat %>% filter(genotype %in% c("wt"))
fit.wt <- loess(new_median~new_time, data=wt.test)
x <- 0:240
px <- predict(fit.wt, newdata = x)
px1 <- diff(px)
#which.max(px1)
wt.loess <- tibble(x = x, y = px)
wt.diff <- tibble (x = x[-1], y = px1)
twoV.test <- oxi.dat %>% filter(genotype %in% c("2V"))
fit.twoV <- loess(new_median~new_time, data=twoV.test)
x <- 0:240
px.2V <- predict(fit.twoV, newdata = x)
px1.2V <- diff(px.2V)
twoV.loess <- tibble(x = x, y = px.2V)
twoV.diff <- tibble (x = x[-1], y = px1.2V)
par(mfrow=c(1, 4))
wt.loess %>%
ggplot(aes(x = x, y = y)) + geom_point(size = 1, alpha = 0.5) + scale_x_continuous(breaks = seq(0,240,30)) + theme_bw() + ggtitle("loess model")
wt.diff %>%
ggplot(aes(x = x, y = y)) + geom_point(size = 1, alpha = 0.5)+ scale_x_continuous(breaks = seq(0, 240, 30)) + theme_bw() + ggtitle("diff(loess model)")
twoV.loess %>%
ggplot(aes(x = x, y = y)) + geom_point(size = 1, alpha = 0.5) + scale_x_continuous(breaks = seq(0,240,30)) + theme_bw() + ggtitle("loess model")
twoV.diff %>%
ggplot(aes(x = x, y = y)) + geom_point(size = 1, alpha = 0.5)+ scale_x_continuous(breaks = seq(0, 240, 30)) + theme_bw() + ggtitle("diff(loess model)")
wt.test <- oxi.dat %>% filter(genotype %in% c("wt"))
library(tidyverse)
library(ggtext)
#library(mgcv)
#library(broom)
library(cowplot)
p.timecourse <- list(
stat_summary(fun = "mean", geom = "point", size = 3),
stat_summary(fun.data = "mean_cl_boot", geom = "errorbar", width = 3),
stat_smooth(aes(size = Genotype == "WT"), method = "loess",
formula = 'y~x', se = FALSE),
scale_x_continuous(breaks = seq(0,240,30)),
scale_size_manual(values = c(0.8, 1.5), guide = "none"),
labs(x = "Time (min)", y = "Cta1-GFP protein level (a.u.)"),
theme_cowplot(line_size = 0.7, font_size = 14),
theme(legend.position=c(0.05,0.75),
#legend.box.background = element_rect(color = "black"),
#legend.box.margin = margin(3,3,3,3),
legend.text = element_text(face = 3),
legend.title = element_text(),
axis.title = element_text(size = rel(1)),
#axis.title.x = element_blank(),
axis.text.x = element_text(hjust=0.5), axis.text = element_text(size = rel(1)),
)
)
# recode the genotype
levels <- c(WT = "wt", PC = "rescue",`4OL` = "4OL", `6OL` = "6OL", `8OL` = "8OL", `10OL` = "10OL")
oxi.dat <- data.ol.oxi %>%
filter(genotype %in% c("wt", "4OL", "6OL", "8OL", "10OL","rescue")) %>%
select(Time, replicate = Replicate, genotype, median) %>%
mutate(Genotype = fct_recode(genotype, !!!levels)) %>%
mutate(new_median =median/1000) %>%
mutate(new_time = as.numeric(gsub("min","",Time)))%>%
arrange(new_time, genotype, replicate)
files <- dir("input/OL_2mMH2O2", pattern = "d*") # get the file names of the merged
files <- file.path("input//OL_2mMH2O2", files)      # this appends the directory to the file names
names(files) <- c("Rep1-2mMH2O2","Rep2-2mMH2O2", "Rep3-2mMH2O2", "Rep4-2mMH2O2")
tp <- c("0min",  "30min", "60min", "90min", "120min", "150min",  "180min", "210min", "240min") # ordered time points
# import and process the data to the format we want
data.ol.oxi <- map_dfr(files, ~read_csv(., na = c("", "NA", "N/A"), col_types = cols()), .id = "Replicate") %>%
#bind_rows(.id = "Replicate") %>%
filter(`X Parameter` == "BL1-H", is.na(`Y Parameter`)) %>%
select(Replicate, Group, Sample, Count, median = `X Median`, peak = `X Peak`,
sd = `X SD`, cv = `X %CV`, rCV = `X %rCV`) %>%
separate(Group, into = c('Time', 'Treatment'), sep = "-") %>%
mutate(Time = ordered(Time, levels = tp)) %>%
mutate(Sample = case_when(Sample == "CTA1-GFP-yH298" ~ "yH298-wt",
Sample == "CTA1-GFP-yH299" ~ "yH299-wt",
Sample == "yH343-wt" ~ "yH343-rescue",
Sample == "yH344-wt" ~ "yH344-rescue",
TRUE ~ Sample)) %>%
mutate(Replicate = gsub("\\-.*","", Replicate)) %>% #
separate(Sample, into = c("Strain", "genotype"), sep = "-") %>%
arrange(Time)
# To replace the value: ifelse() for a single test, case_when() for multiple test
# \\-: escape character "\\" used to escape the special meaning of -, instead take - as a common regex pattern. Or we can specify the - as a regex pattern within a square bracket class [-]
#.*: This part matches any sequence of characters (.* is a common regex pattern for "any character, zero or more times"). metacharacter
# recode the genotype
levels <- c(WT = "wt", PC = "rescue",`4OL` = "4OL", `6OL` = "6OL", `8OL` = "8OL", `10OL` = "10OL")
oxi.dat <- data.ol.oxi %>%
filter(genotype %in% c("wt", "4OL", "6OL", "8OL", "10OL","rescue")) %>%
select(Time, replicate = Replicate, genotype, median) %>%
mutate(Genotype = fct_recode(genotype, !!!levels)) %>%
mutate(new_median =median/1000) %>%
mutate(new_time = as.numeric(gsub("min","",Time)))%>%
arrange(new_time, genotype, replicate)
genotype_color <- RColorBrewer::brewer.pal(8, "Dark2")[c(8, 7, 6, 1, 5, 4)]
names(genotype_color) <- names(levels)
oxi.dat %>%
filter(!is.na(new_median)) %>%
ggplot(aes(x = new_time, y = new_median, color = Genotype)) + p.timecourse +
scale_color_manual(values= genotype_color, limits = names(genotype_color)) +
xlab("Phosphate starvation, time (min)")
#scale_y_continuous(limits = c(NA, 22))
#ggsave("output/OL_oxi.png", width = 6, height = 8)
files <- dir("input/TrunV_0Pi", pattern = "d01*") # get the file names of the merged
files <- file.path("input//TrunV_0Pi", files)         # this appends the directory to the file names
names(files) <- c("Rep1-0Pi-Ctrl","Rep2-0Pi-Ctrl", "Rep3-0Pi-Ctrl")
tp <- c("0min",  "30min", "60min", "90min", "120min", "150min",  "180min", "210min", "240min") # ordered time points
# import and process the data to the format we want
data.TrunV <- map_dfr(files, ~read_csv(., na = c("", "NA", "N/A"), col_types = cols()), .id = "Replicate") %>%
#bind_rows(.id = "Replicate") %>%
filter(!is.na(median),`X Parameter` == "BL1-H", is.na(`Y Parameter`)) %>%
select(Replicate, Group, Sample, Count, median = `X Median`, peak = `X Peak`,
sd = `X SD`, cv = `X %CV`, rCV = `X %rCV`) %>%
separate(Group, into = c('Time', 'Treatment'), sep = "-") %>%
mutate(Time = ordered(Time, levels = tp)) %>%
mutate(Sample = case_when(Sample == "CTA1-GFP-yH298" ~ "yH298-wt",
Sample == "CTA1-GFP-yH299" ~ "yH299-wt",
Sample == "yH343-wt" ~ "yH343-rescue",
Sample == "yH344-wt" ~ "yH344-rescue",
TRUE ~ Sample)) %>%
mutate(Replicate = gsub("\\-.*","", Replicate)) %>%
separate(Sample, into = c("Strain", "genotype"), sep = "-") %>%
filter(!is.na(median)) %>%
arrange(Time)
# To replace the value: ifelse() for a single test, case_when() for multiple test
# \\-: escape character "\\" used to escape the special meaning of -, instead take - as a common regex pattern. Or we can specify the - as a regex pattern within a square bracket class [-]
#.*: This part matches any sequence of characters (.* is a common regex pattern for "any character, zero or more times"). metacharacter
# recode the genotype
levels <- c(WT = "wt", `PC` = "rescue", `2V` = "2V",`4V` = "4V", `6V` = "6V", `8V` = "8V")
pi.dat <- data.TrunV %>%
filter(genotype %in% c("wt", "2V", "4V", "6V", "8V","rescue")) %>%
select(Time, replicate = Replicate, genotype, median) %>%
mutate(Genotype = fct_recode(genotype, !!!levels)) %>%
mutate(new_median =median/1000) %>%
mutate(new_time = as.numeric(gsub("min","",Time)))%>%
arrange(new_time, genotype, replicate)
genotype_color <- RColorBrewer::brewer.pal(8, "Dark2")[c(8, 7, 6, 1, 5, 4)]
names(genotype_color) <- names(levels)
pi.dat %>%
filter(!is.na(new_median)) %>%
ggplot(aes(x = new_time, y = new_median, color = Genotype)) + p.timecourse +
scale_color_manual(values= genotype_color, limits = names(genotype_color)) +
xlab("Phosphate starvation, time (min)")
#scale_y_continuous(limits = c(NA, 22))
ggsave("output/TrunV_0Pi.png", width = 6, height = 8)
files <- dir("input/TrunV_2mMH2O2", pattern = "d*") # get the file names of the merged
files <- file.path("input//TrunV_2mMH2O2", files)      # this appends the directory to the file names
names(files) <- c("Rep1-2mMH2O2","Rep2-2mMH2O2", "Rep3-2mMH2O2")
tp <- c("0min",  "30min", "60min", "90min", "120min", "150min",  "180min", "210min", "240min") # ordered time points
# import and process the data to the format we want
data.TrunV.oxi <- map_dfr(files, ~read_csv(., na = c("", "NA", "N/A"), col_types = cols()), .id = "Replicate") %>%
#bind_rows(.id = "Replicate") %>%
filter(`X Parameter` == "BL1-H", is.na(`Y Parameter`)) %>%
select(Replicate, Group, Sample, Count, median = `X Median`, peak = `X Peak`,
sd = `X SD`, cv = `X %CV`, rCV = `X %rCV`) %>%
separate(Group, into = c('Time', 'Treatment'), sep = "-") %>%
mutate(Time = ordered(Time, levels = tp)) %>%
mutate(Sample = case_when(Sample == "CTA1-GFP-yH298" ~ "yH298-wt",
Sample == "CTA1-GFP-yH299" ~ "yH299-wt",
Sample == "yH343-wt" ~ "yH343-rescue",
Sample == "yH344-wt" ~ "yH344-rescue",
TRUE ~ Sample)) %>%
mutate(Replicate = gsub("\\-.*","", Replicate)) %>% #
separate(Sample, into = c("Strain", "genotype"), sep = "-") %>%
filter(!is.na(median)) %>%
arrange(Time)
# To replace the value: ifelse() for a single test, case_when() for multiple test
# \\-: escape character "\\" used to escape the special meaning of -, instead take - as a common regex pattern. Or we can specify the - as a regex pattern within a square bracket class [-]
#.*: This part matches any sequence of characters (.* is a common regex pattern for "any character, zero or more times"). metacharacter
# recode the genotype
levels <- c(WT = "wt", `PC` = "rescue", `2V` = "2V",`4V` = "4V", `6V` = "6V", `8V` = "8V")
oxi.dat <- data.TrunV.oxi  %>%
filter(genotype %in% c("wt", "2V", "4V", "6V", "8V","rescue")) %>%
select(Time, replicate = Replicate, genotype, median) %>%
mutate(Genotype = fct_recode(genotype, !!!levels)) %>%
mutate(new_median =median/1000) %>%
mutate(new_time = as.numeric(gsub("min","",Time)))%>%
arrange(new_time, genotype, replicate)
genotype_color <- RColorBrewer::brewer.pal(8, "Dark2")[c(8, 7, 6, 1, 5, 4)]
names(genotype_color) <- names(levels)
oxi.dat %>%
filter(!is.na(new_median)) %>%
ggplot(aes(x = new_time, y = new_median, color = Genotype)) + p.timecourse +
scale_color_manual(values= genotype_color, limits = names(genotype_color)) +
xlab("Phosphate starvation, time (min)")
#scale_y_continuous(limits = c(NA, 22))
#ggsave("output/TrunV_oxi.png", width = 6, height = 8)
wt.test <- oxi.dat %>% filter(genotype %in% c("wt"))
fit.wt <- loess(new_median~new_time, data=wt.test)
x <- 0:240
px <- predict(fit.wt, newdata = x)
px1 <- diff(px)
#which.max(px1)
wt.loess <- tibble(x = x, y = px)
wt.diff <- tibble (x = x[-1], y = px1)
twoV.test <- oxi.dat %>% filter(genotype %in% c("2V"))
fit.twoV <- loess(new_median~new_time, data=twoV.test)
x <- 0:240
px.2V <- predict(fit.twoV, newdata = x)
px1.2V <- diff(px.2V)
twoV.loess <- tibble(x = x, y = px.2V)
twoV.diff <- tibble (x = x[-1], y = px1.2V)
par(mfrow=c(1, 4))
wt.loess %>%
ggplot(aes(x = x, y = y)) + geom_point(size = 1, alpha = 0.5) + scale_x_continuous(breaks = seq(0,240,30)) + theme_bw() + ggtitle("loess model")
wt.diff %>%
ggplot(aes(x = x, y = y)) + geom_point(size = 1, alpha = 0.5)+ scale_x_continuous(breaks = seq(0, 240, 30)) + theme_bw() + ggtitle("diff(loess model)")
twoV.loess %>%
ggplot(aes(x = x, y = y)) + geom_point(size = 1, alpha = 0.5) + scale_x_continuous(breaks = seq(0,240,30)) + theme_bw() + ggtitle("loess model")
twoV.diff %>%
ggplot(aes(x = x, y = y)) + geom_point(size = 1, alpha = 0.5)+ scale_x_continuous(breaks = seq(0, 240, 30)) + theme_bw() + ggtitle("diff(loess model)")
coef(fit.wt)
View(fit.wt)
wt.test <- oxi.dat %>% filter(genotype %in% c("wt"))
fit.wt <- loess(new_median~new_time, data=wt.test)
x <- 0:240
px <- predict(fit.wt, newdata = x)
px1 <- diff(px)
#which.max(px1)
wt.loess <- tibble(x = x, y = px)
wt.diff <- tibble (x = x[-1], y = px1)
twoV.test <- oxi.dat %>% filter(genotype %in% c("2V"))
fit.twoV <- loess(new_median~new_time, data=twoV.test)
x <- 0:240
px.2V <- predict(fit.twoV, newdata = x)
px1.2V <- diff(px.2V)
twoV.loess <- tibble(x = x, y = px.2V)
twoV.diff <- tibble (x = x[-1], y = px1.2V)
par(mfrow=c(1, 4))
wt.loess %>%
ggplot(aes(x = x, y = y)) + geom_point(size = 1, alpha = 0.5) + scale_x_continuous(breaks = seq(0,240,30)) + theme_bw() + ggtitle("loess model")
wt.diff %>%
ggplot(aes(x = x, y = y)) + geom_point(size = 1, alpha = 0.5)+ scale_x_continuous(breaks = seq(0, 240, 30)) + theme_bw() + ggtitle("diff(loess model)")
twoV.loess %>%
ggplot(aes(x = x, y = y)) + geom_point(size = 1, alpha = 0.5) + scale_x_continuous(breaks = seq(0,240,30)) + theme_bw() + ggtitle("loess model")
twoV.diff %>%
ggplot(aes(x = x, y = y)) + geom_point(size = 1, alpha = 0.5)+ scale_x_continuous(breaks = seq(0, 240, 30)) + theme_bw() + ggtitle("diff(loess model)")
